#version 450 compatibility
#extension GL_ARB_shading_language_include : require
#include "/common/noise_gen.glsl"

/*
	用PERLIN-WORLEY噪音和WORLEY噪音填充3D材质，WORLEY噪音用于构建基础形状
*/

layout (local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

layout (rgba8, binding = 0) uniform image3D out_vol_tex;

// =====================================================================================
// Code from Sebastien Hillarie 3d noise generator https://github.com/sebh/TileableVolumeNoise
uniform float frequence_mul[6u] = float[]( 2.0,8.0,14.0,20.0,26.0,32.0 );

float Remap(float origin_val, float origin_min, float origin_max, float new_min, float new_max)
{
    return new_min + ((origin_val - origin_min) / (origin_max - origin_min)) * (new_max - new_min);
}

vec4 Stackable3DNoise(ivec3 pixel)
{
	vec3 coord = vec3(float(pixel.x) / 128.0, float(pixel.y) / 128.0, float(pixel.z) / 128.0);

	// Perlin FBM noise
	int octaveCount = 7;
	float frequency = 8.0;
	float perlin_noise = PerlinNoise3D(coord, frequency, octaveCount);

	float perlin_worley_noise = 0.0f;
	{
		float cell_count = 4.0;
		float worley_noise0 = (1.0 - WorleyNoise3D(coord, cell_count * frequence_mul[0]));
		float worley_noise1 = (1.0 - WorleyNoise3D(coord, cell_count * frequence_mul[1]));
		float worley_noise2 = (1.0 - WorleyNoise3D(coord, cell_count * frequence_mul[2]));
//		float worley_noise3 = (1.0 - WorleyNoise3D(coord, cell_count * frequence_mul[3]));
//		float worley_noise4 = (1.0 - WorleyNoise3D(coord, cell_count * frequence_mul[4]));
//		float worley_noise5 = (1.0 - WorleyNoise3D(coord, cell_count * frequence_mul[5]));	// half the frequency of texel, we should not go further (with cellCount = 32 and texture size = 64)

		// PerlinWorley noise as described p.101 of GPU Pro 7
		float worleyFBM = worley_noise0 *0.625f + worley_noise1 *0.25f + worley_noise2 *0.125f;

		perlin_worley_noise = Remap(perlin_noise, 0.0, 1.0, worleyFBM, 1.0);
	}

	float cell_count = 4.0;
	float worleyNoise0 = (1.0 - WorleyNoise3D(coord, cell_count * 1.0));
	float worley_noise01 = (1.0 - WorleyNoise3D(coord, cell_count * 2.0));
	float worley_noise02 = (1.0 - WorleyNoise3D(coord, cell_count * 4.0));
	float worley_noise03 = (1.0 - WorleyNoise3D(coord, cell_count * 8.0));
	float worley_noise04 = (1.0 - WorleyNoise3D(coord, cell_count * 16.0));
	//float worleyNoise5 = (1.0f - Tileable3dNoise::WorleyNoise(coord, cellCount * 32));
	//cellCount=2 -> half the frequency of texel, we should not go further (with cellCount = 32 and texture size = 64)

	// Three frequency of Worley FBM noise
	float worleyFBM0 = worley_noise01*0.625f + worley_noise02*0.25f + worley_noise03*0.125f;
	float worleyFBM1 = worley_noise02*0.625f + worley_noise03*0.25f + worley_noise04*0.125f;
	//float worleyFBM2 = worleyNoise3*0.625f + worleyNoise4*0.25f + worleyNoise5*0.125f;
	float worleyFBM2 = worley_noise03*0.75f + worley_noise04*0.25f;
	// cellCount=4 -> worleyNoise5 is just noise due to sampling frequency=texel frequency. So only take into account 2 frequencies for FBM

	return vec4(perlin_worley_noise * perlin_worley_noise, worleyFBM0, worleyFBM1, worleyFBM2);
}

void main()
{
    ivec3 pixel = ivec3(gl_GlobalInvocationID.xyz);

	imageStore (out_vol_tex, pixel, Stackable3DNoise(pixel));
}
